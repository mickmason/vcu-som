//Project functions & mixins
//Borrowed without shame from https://codepen.io/corysimmons/pen/mVLVbo
//Parses number from a string like parseInt()
@import 'generic/colors';
@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}

//Flattens top of feature headings to accommodate line heights and keep even v rhythm
@function flat-margin($font-size, $lh: 1.3) {
    $font-size: number($font-size);
    @return ($font-size - ($font-size * $lh)) / 2 ; 
}

//Project mixins:
@mixin feature-font($family: $garamond-prem, $weight: 300) {
    font-family: $family;
    font-weight: $weight;
}
@mixin make-flexbox($display: flex, $direction: column, $wrap: nowrap, $justify: center, $align: start ) {
    @if $display == flex {
        display: flex;     
    }
    @if $display == inline-flex {
        display: inline-flex;     
    }
    display: flex; 
    flex-direction:         $direction;
    flex-wrap:              $wrap;
    justify-content:        $justify;
    align-items:            $align;
}
@mixin make-flexitem($grow: 1, $shrink: 1, $basis: auto, $none: 0) {
    @if $none == none {
        -ms-flex: none;
        flex: none;    
    } @else {
         -ms-flex: $grow $shrink $basis;
        flex: $grow $shrink $basis;       
    }
}
@mixin make-gl-col($width: $gl-med) {
     -ms-flex: none;
     flex: none;
     width: $width;
}
@mixin make-image-container($padding-top: 50%) {
    padding-top: $padding-top;
    overflow: hidden;
    img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: auto;
    }
}
@mixin make-fullwidth-box($gutter: $gutter-width) {
    padding-left:  $gutter;
    padding-right: $gutter;
    margin-left:  -$gutter;
    margin-right: -$gutter;
}

/* Gradient fills */
@mixin boxShadow($color: $black, $options...) {
    $box-shadows: ();
    @each $option in $options {
            @if $option == insetBottom {  
                $box-shadows: append($box-shadows, inset 0px -8px 8px -4px rgba($color, 0.24), comma); 
            } @else if $option == insetTop {
                $box-shadows: append($box-shadows, inset 0px 8px 8px -4px rgba($color, 0.24), comma); 
            } @else if $option == insetTopThin {
                $box-shadows: append($box-shadows, inset 0px 4px 4px -2px rgba($color,0.36), comma); 
            } @else if $option == insetBottomThin {
                $box-shadows: append($box-shadows, inset 0px -4px 4px -2px rgba($color,0.36), comma);  
            } @else if $option == insetLeft { 
                $box-shadows: append($box-shadows, inset 8px 0px 8px -4px rgba($color,0.24), comma);
            } @else if $option == insetRight {
                $box-shadows: append($box-shadows, inset -8px 0px 8px -4px rgba($color,0.24), comma); 
            } @else if $option == insetLeftThin { 
                $box-shadows: append($box-shadows, inset 4px 0px 4px -3px rgba($color,0.36), comma);
            } @else if $option == insetRightThin {
                $box-shadows: append($box-shadows, inset -4px 0px 4px -3px rgba($color,0.36), comma);  
            } @else if $option == bottom {
                $box-shadows: append($box-shadows, 0px 8px 8px -4px rgba($color,0.24), comma); 
            } @else if $option == bottomThin {
                $box-shadows: append($box-shadows, 0px 4px 4px -2px rgba($color,0.36), comma); 
            } @else if $option == top {
                $box-shadows: append($box-shadows, 0px -8px 8px -4px rgba($color,0.24), comma);
            } @else if $option == topThin {
                $box-shadows: append($box-shadows, 0px -4px 4px -2px rgba($color,0.36), comma);
            } @else if $option == left {
                $box-shadows: append($box-shadows, -8px 0px 8px -4px rgba($color,0.24), comma);
            } @else if $option == right {
                $box-shadows: append($box-shadows, 8px 0px 8px -4px rgba($color,0.24), comma); 
            } @else if $option == leftThin {
                $box-shadows: append($box-shadows, -4px 0px 4px -2px rgba($color,0.24), comma);
            } @else if $option == rightThin {
                $box-shadows: append($box-shadows, 4px 0px 4px -2px rgba($color,0.24), comma); 
            }  @else if $option == fullPaper {
                $box-shadows: append($box-shadows, (0 18px 38px rgba($color, 0.12), 0 16px 12px rgba($color,0.22)), comma);
            } 
    }
    -webkit-box-shadow:  $box-shadows;
    -moz-box-shadow:     $box-shadows;
    box-shadow:          $box-shadows;          
}
@mixin makeBoxShadow($color: $black, $options...) {
    -webkit-box-shadow: $options rgba($color, 0.36);
    -moz-box-shadow:    $options rgba($color, 0.36); 
    box-shadow:         $options rgba($color, 0.36);
}
@mixin vertical-align($shiftX: -50%, $shiftY: -50%) {
    transform: translate($shiftX, $shiftY);
}
@mixin vision-angle($bg-color: $primary, $pull: center) {
    position: relative;
    z-index: 3; 
    &:before {
        content: " ";
        display: block;
        position: absolute;
        height: 100%;
        width: 119.5%;
        top: 0;
        transition: background-color 120ms ease-out; 
        transform: skewX(-19.5deg);
        z-index: -1;
        background-color: $bg-color;
        @if $pull == left { 
            left: -19.5%; 
            right: 0;  
        } @elseif $pull == right {
            left: 0;
            right: -19.5%;
        } @else {
            transform: translateX(-19.5%/2) skewX(-19.5deg);
            transform: skewX(-19.5deg), translate(-(19.5/2)deg);
            right: auto;
        }
    }
}
@mixin active-link {
    &:hover, &:active, &:focus {
        @content;    
    }
}
@mixin make-image-overlay($color, $z-index: 0, $transp: 0.32) { 
    position: relative;
    &::before {
        z-index: $z-index; 
        content: " ";
        position: absolute;
        top: 0;
        bottom: 0;
        right: 0;
        left: 0;
        background-color: rgba($color, $transp); 
    }
}
@mixin do-gradient($direction: to top, $start-col: $black, $end-col: transparent, $end-stop: 72%) {
    background-image: -webkit-linear-gradient($direction, $start-col, $end-col $end-stop);
    background-image: -o-linear-gradient($direction, $start-col, $end-col $end-stop);
    background-image: linear-gradient($direction, $start-col, $end-col $end-stop);    
}
@mixin has-background-image($size: cover) {
    background-repeat: no-repeat;
        background-position: center; 
        background-size: $size;
}
@mixin make-button($background: $primary, $color: $white, $border-color: $white) {
     color: $color;
     background-color: $background;
     border-color: $border-color; 
     @include active-link {
        color: $background;
        border-color: $background; 
        background-color: $color;
     }
}
@mixin make-text-shadow($x: 4px, $y: 4px, $blur: 2px, $color: rgba($black, 0.32)) {
    text-shadow: $x $y $blur $color;
}
    
